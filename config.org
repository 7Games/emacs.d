#+TITLE: Emacs Configuration
#+AUTHOR: Benjamin

* Others
** Kill messages buffer on startup
#+BEGIN_SRC emacs-lisp
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")
#+END_SRC

** Enable eglot in programming languages
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'python-base-mode-hook 'eglot-ensure)
  (add-hook 'lua-base-mode-hook 'eglot-ensure)
  (add-hook 'rust-base-mode-hook 'eglot-ensure)
#+END_SRC

** Only show errors
#+BEGIN_SRC emacs-lisp
  (setq warning-minimum-level :emergency)
#+END_SRC

** Set garbage collection
#+BEGIN_SRC emacs-lisp
  (setq
    gc-cons-threshold 402653184
    gc-cons-percentage 0.6)
#+END_SRC

** Disable backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Set the initial major mode for new buffers to 'text-mode'
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
#+END_SRC

** Enable cua mode
#+BEGIN_SRC emacs-lisp
  (cua-mode t)
#+END_SRC

** Personal stuff
#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/.emacs.d/personal.org")
#+END_SRC

* Keybinds
** Allow selection with Shift+<arrow keys>
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC

* Packges
** Enable Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

** Corfu, code completion
Stolen from https://github.com/Gavinok/emacs.d
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; Do not preview current candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
		("M-SPC"      . corfu-insert-separator)
		("TAB"        . corfu-insert)
		([tab]        . corfu-insert)
		("S-TAB"      . corfu-previous)
		([backtab]    . corfu-previous)
		("S-<return>" . corfu-insert)
		("RET"        . nil))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
	      (lambda () (setq-local corfu-quit-at-boundary t
				     corfu-quit-no-match t
				     corfu-auto nil)
		(corfu-mode))))
#+END_SRC

** Evil, vim keys for emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (setq evil-want-C-i-jump nil)
    :config
    (evil-mode))
#+END_SRC

** Beacon, cursor finder
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode))
#+END_SRC

** Smex, enhancing M-x with interactive command search.
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :config
    (smex-initialize))

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

** Org-modern, make org-mode look good
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :ensure t
    :config
    (with-eval-after-load 'org (global-org-modern-mode)))
#+END_SRC

** Magit, git client for emacs
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** Tokyo night theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t)
#+END_SRC

* Style
** Enable smooth scrolling
#+BEGIN_SRC emacs-lisp
  (pixel-scroll-precision-mode)
#+END_SRC

** Enable file fuzzy finder
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
#+END_SRC

** Show underlines at the descent line for variable-pitch fonts
#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC

** Show line numbers when in a programming mode
#+BEGIN_SRC emacs-lisp
  (defun my/prog-mode ()
    "Enable line numbers in programming modes."
    (setq display-line-numbers 'relative))

  (add-hook 'prog-mode-hook 'my/prog-mode)
#+END_SRC

** Enable blinking cursor mode
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 1)
#+END_SRC

** Set default line spacing to 0 pixels
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0)
#+END_SRC

** Display images in org-mode
#+BEGIN_SRC emacs-lisp
  (setq-default org-display-inline-images t)
  (setq-default org-redisplay-inline-images t)
  (setq-default org-startup-with-inline-images "inlineimages")
#+END_SRC

** Disable startup page
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
#+END_SRC

** Change scratch buffer message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message ";;; GNU Emacs - the only editor that can save your soul\n\n")
#+END_SRC

** Disable all ugly UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode   0)
  (tooltip-mode    0)
  (scroll-bar-mode 0)
  (menu-bar-mode   0)
#+END_SRC

** Custom modeline
#+BEGIN_SRC emacs-lisp
    (defun mode-line-render (left right)
      "Return a string of `window-width' length.
	  Containing LEFT, and RIGHT aligned respectively."
      (let ((available-width
	     (- (window-total-width)
		(+ (length (format-mode-line left))
		   (length (format-mode-line right))))))
	(append left
		(list (format (format "%%%ds" available-width) ""))
		right)))

  (setq-default header-line-format
		'((:eval
		   (mode-line-render
		    ;; Left.
		    (quote (
			    ;; For evil-mode
			    (:eval (when (bound-and-true-p evil-state)
				     (cond
				      ((eq evil-state 'visual) "[V] ")
				      ((eq evil-state 'normal) "[N] ")
				      ((eq evil-state 'insert) "[I] ")
				      (t "* "))))
			    "%b"
			    (:eval (if (buffer-modified-p)
				       (propertize " (modified)" 'face '(:foreground "#aaa"))
				     ""))))
		    ;; Right.
		    (quote (
			    "%l:%c [%m] "))))))

    (setq header-line-format mode-line-format)
    (setq-default mode-line-format nil)

    (set-face-attribute 'header-line nil
			:underline "white"
			:box `(:line-width 3 :color "#353535" :style nil))
#+END_SRC

** Set theme, font, and padding
#+BEGIN_SRC emacs-lisp
  (load-theme 'doom-tokyo-night t)
  (set-frame-font "Iosevka Comfy 13")
  (set-frame-parameter (selected-frame) 'internal-border-width 13)
  ;; For emacs-client
  (add-hook 'after-make-frame-functions
	    (lambda (frame)
	      (with-selected-frame frame
		(load-theme 'doom-tokyo-night t)
		(set-frame-font "Iosevka Comfy 13")
		(setq-default left-margin-width 2 right-margin-width 2)
		(set-window-buffer nil (current-buffer))
		(set-frame-parameter (selected-frame) 'internal-border-width 13))))
#+END_SRC

** Org mode
*** Hide emphasis markers in org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

*** Disable confirmation for executing Elisp code in org-mode links
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-elisp-link-function nil)
#+END_SRC
