#+TITLE: Packages Configuration
#+AUTHOR: Benjamin

* Enable Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

* LSP Stuff
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
		   (c-mode . lsp)
		   (c++-mode . lsp)
		   (rust-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
  
    (use-package lsp-ui
	  :ensure t
	  :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+END_SRC

* Company, code completion
#+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
  :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
      :ensure t
      :config
        ((define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
	 (setq treemacs-indent-guide-style 'line)))

  (use-package treemacs-evil
      :ensure t)
#+END_SRC

* Evil, vim keys for emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
      (evil-mode 1))

  (use-package evil-leader
    :ensure t
    :config
      (global-evil-leader-mode)
      (evil-leader/set-leader "SPC")
      (evil-leader/set-key "f" 'treemacs-select-window)
      (evil-leader/set-key "g" 'magit)
      )
#+END_SRC

* Beacon, cursor finder
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode))
#+END_SRC

* Smex, enhancing M-x with interactive command search.
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :config
    (smex-initialize))

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

* Org-modern, make org-mode look good
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :ensure t
    :config
      (with-eval-after-load 'org (global-org-modern-mode)))
#+END_SRC

* Magit, git client for emacs
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Adwaita Dark theme
#+BEGIN_SRC emacs-lisp
  (use-package adwaita-dark-theme
    :ensure t
    :config
    (load-theme 'adwaita-dark t))
#+END_SRC

* Doom-Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (setq dashboard-banner-logo-title "")
    (doom-modeline-mode t))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '()))
#+END_SRC

* Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

